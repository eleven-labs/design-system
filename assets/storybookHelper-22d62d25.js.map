{"version":3,"file":"storybookHelper-22d62d25.js","sources":["../../src/helpers/objectHelper.ts","../../src/helpers/storybookHelper.ts"],"sourcesContent":["export const get = <TObject extends Record<string, unknown>, TValue = unknown, TDefaultValue = unknown>(\n  object: TObject,\n  path: string,\n  defaultValue?: TDefaultValue\n): TValue => {\n  const travel = (regexp: RegExp): TObject =>\n    String.prototype.split\n      .call(path, regexp)\n      .filter(Boolean)\n      .reduce<TObject>(\n        (currentResult, key) =>\n          currentResult !== null && currentResult !== undefined ? (currentResult[key] as TObject) : currentResult,\n        object\n      );\n  const result = travel(/[,[\\]]+?/) || travel(/[,.[\\]]+?/);\n  return (result === undefined || result === object ? defaultValue : result) as TValue;\n};\n","import type { ControlType } from '@storybook/blocks';\nimport type { ArgTypes, InputType } from '@storybook/csf';\n\nimport { tokenVariables } from '@/constants';\nimport { get } from '@/helpers/objectHelper';\n\nimport { kebabCase } from './stringHelper';\n\nexport const getLinkMdnByCssProperty = (cssProperty: string): string =>\n  `https://developer.mozilla.org/en-US/docs/Web/CSS/${cssProperty}`;\n\nexport const createDescription = (options: { cssProperties: string[]; cssValues?: string[] }): string => {\n  const description: string[] = [];\n  const cssProps = options.cssProperties\n    .map((cssProp) => kebabCase(cssProp))\n    .map((cssProp) => ` [${cssProp}](${getLinkMdnByCssProperty(cssProp)})`)\n    .join(', ');\n\n  let cssPropertiesDescription = `**CSS Properties**: ${cssProps}`;\n  if (options.cssValues) {\n    cssPropertiesDescription += ` \\`(${options.cssValues.join(' | ')})\\``;\n  }\n\n  description.push(cssPropertiesDescription);\n\n  return description.join('<br />');\n};\n\nexport const createControls = <T>(parameters: {\n  category: string;\n  props: Record<keyof T, readonly string[]>;\n  subCategory?: string;\n  controlType?: Partial<Record<keyof T, ControlType>>;\n  options?: Partial<Record<keyof T, readonly string[]>> | readonly string[];\n}): Partial<ArgTypes<T>> =>\n  (Object.entries(parameters.props) as [keyof T, string[]][]).reduce<Partial<ArgTypes<T>>>(\n    (controls, [propName, cssProperties]) => {\n      controls[propName] = {\n        description: createDescription({\n          cssProperties,\n        }),\n        table: {\n          category: parameters.category,\n        },\n      };\n\n      if (parameters.subCategory) {\n        controls[propName]!.table.subcategory = parameters.subCategory;\n      }\n\n      if (parameters.controlType) {\n        (controls[propName] as InputType).control = parameters.controlType?.[propName];\n      }\n\n      if (parameters.options) {\n        if (Array.isArray(parameters.options)) {\n          (controls[propName] as InputType).options = parameters.options;\n        } else if ((parameters.options as Record<keyof T, readonly string[]>)?.[propName]) {\n          (controls[propName] as InputType).options = (parameters.options as Record<keyof T, readonly string[]>)[\n            propName\n          ];\n        }\n\n        if (!controls[propName]?.control) {\n          (controls[propName] as InputType).control = 'select';\n        }\n      }\n\n      return controls;\n    },\n    {}\n  );\n\nexport const getValueOfCssPropertyInDesignTokens = (options: {\n  path: string;\n  tokenName: string;\n  device: 'mobile' | 'desktop';\n  propertyCSS: string;\n}): number | string =>\n  get(tokenVariables, `${options.device}.${options.path}.${options.tokenName}.${options.propertyCSS}.value`) ||\n  get(tokenVariables, `${options.path}.${options.tokenName}.${options.propertyCSS}.value`) ||\n  get(tokenVariables, `${options.path}.base.${options.propertyCSS}.value`);\n"],"names":["get","object","path","defaultValue","travel","regexp","currentResult","key","result","getLinkMdnByCssProperty","cssProperty","createDescription","options","description","cssPropertiesDescription","cssProp","kebabCase","createControls","parameters","controls","propName","cssProperties","_a","_b","_c","getValueOfCssPropertyInDesignTokens","tokenVariables"],"mappings":"sGAAO,MAAMA,EAAM,CACjBC,EACAC,EACAC,IACW,CACX,MAAMC,EAAUC,GACd,OAAO,UAAU,MACd,KAAKH,EAAMG,CAAM,EACjB,OAAO,OAAO,EACd,OACC,CAACC,EAAeC,IACdD,GAAkB,KAAuCA,EAAcC,CAAG,EAAgBD,EAC5FL,CAAA,EAEAO,EAASJ,EAAO,UAAU,GAAKA,EAAO,WAAW,EACvD,OAAQI,IAAW,QAAaA,IAAWP,EAASE,EAAeK,CACrE,ECRaC,EAA2BC,GACtC,oDAAoDA,IAEzCC,EAAqBC,GAAuE,CACvG,MAAMC,EAAwB,CAAA,EAM9B,IAAIC,EAA2B,uBALdF,EAAQ,cACtB,IAAKG,GAAYC,EAAUD,CAAO,CAAC,EACnC,IAAKA,GAAY,KAAKA,MAAYN,EAAwBM,CAAO,IAAI,EACrE,KAAK,IAAI,IAGZ,OAAIH,EAAQ,YACVE,GAA4B,OAAOF,EAAQ,UAAU,KAAK,KAAK,QAGjEC,EAAY,KAAKC,CAAwB,EAElCD,EAAY,KAAK,QAAQ,CAClC,EAEaI,EAAqBC,GAO/B,OAAO,QAAQA,EAAW,KAAK,EAA4B,OAC1D,CAACC,EAAU,CAACC,EAAUC,CAAa,IAAM,WACvC,OAAAF,EAASC,CAAQ,EAAI,CACnB,YAAaT,EAAkB,CAC7B,cAAAU,CAAA,CACD,EACD,MAAO,CACL,SAAUH,EAAW,QACvB,CAAA,EAGEA,EAAW,cACbC,EAASC,CAAQ,EAAG,MAAM,YAAcF,EAAW,aAGjDA,EAAW,cACZC,EAASC,CAAQ,EAAgB,SAAUE,EAAAJ,EAAW,cAAX,YAAAI,EAAyBF,IAGnEF,EAAW,UACT,MAAM,QAAQA,EAAW,OAAO,EACjCC,EAASC,CAAQ,EAAgB,QAAUF,EAAW,SAC7CK,EAAAL,EAAW,UAAX,MAAAK,EAA4DH,KACrED,EAASC,CAAQ,EAAgB,QAAWF,EAAW,QACtDE,CACF,IAGGI,EAAAL,EAASC,CAAQ,IAAjB,MAAAI,EAAoB,UACtBL,EAASC,CAAQ,EAAgB,QAAU,WAIzCD,CACT,EACA,CAAC,CACH,EAEWM,EAAuCb,GAMlDZ,EAAI0B,EAAgB,GAAGd,EAAQ,UAAUA,EAAQ,QAAQA,EAAQ,aAAaA,EAAQ,mBAAmB,GACzGZ,EAAI0B,EAAgB,GAAGd,EAAQ,QAAQA,EAAQ,aAAaA,EAAQ,mBAAmB,GACvFZ,EAAI0B,EAAgB,GAAGd,EAAQ,aAAaA,EAAQ,mBAAmB"}
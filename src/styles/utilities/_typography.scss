@use 'sass:map';
@use '../abstracts' as *;

$text-align-list: map.get($css-properties, 'text-align');
$font-weight-list: map.get($token-variables, 'font-weight');
$text-transform-list: map.get($css-properties, 'text-transform');
$typography-prop-list: (
  'fontWeight': (
    'prefix-class-name': 'font-weight',
    'property-css': 'font-weight',
    'value-list': $font-weight-list,
  ),
  'textTransform': (
    'prefix-class-name': text,
    'property-css': 'text-transform',
    'value-list': $text-transform-list,
  ),
);
$typography-prop-list-with-breakpoints: (
  'textAlign':  (
    'prefix-class-name': 'text',
    'property-css': 'text-align',
    'value-list': $text-align-list,
  ),
);


@mixin text-component($config) {
  $base-properties: ();

  @if map.get($config, 'base') {
    $base-properties: map.get($config, 'base');
  }

  @each $component-variant-name, $properties in $config {
    @if $component-variant-name != 'base' {
      $icon-size: map.get($properties, 'icon-size');
      .text-#{$component-variant-name} {
        @each $property-name, $property-value in map.merge($base-properties, $properties) {
          @if $property-name != 'icon-size' {
            #{$property-name}: #{$property-value};
          }
        }

        @if $icon-size {
          .icon {
            font-size: $icon-size;
          }
        }
      }
    }
  }
}

@mixin line-clamp($number-of-lines) {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $number-of-lines;
  text-overflow: ellipsis;
}

/*
 * Typography System Class Names
 */
@include system-classes($typography-prop-list);
@include system-classes-with-breakpoints($typography-prop-list-with-breakpoints);

.text-underline {
  text-decoration: underline;
}

.text-italic {
  font-style: italic;
}

$heading-config: map.get($token-variables, 'typography', 'heading');
$text-config: map.get($token-variables, 'typography', 'text');

@include component('heading', $heading-config);
@include text-component($text-config);

@each $breakpoint-name, $breakpoint-value in map.get($token-variables, 'breakpoint') {
  @include create-media-queries($breakpoint-name) {
    @for $number-of-lines from 1 to 4 {
      .line-clamp-#{$number-of-lines}\@#{$breakpoint-name} {
        @include line-clamp($number-of-lines);
      }
    }
  }
}
